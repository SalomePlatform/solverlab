/*
 * point.cxx
 *
 *  Created on: 23 janv. 2012
 *      Authors: CDMAT
 */

#include "Point.hxx"
#include <cmath>

using namespace std;

//----------------------------------------------------------------------
Point::Point( void )
//----------------------------------------------------------------------
{
	_x[0]=0.0;
	_x[1]=0.0;
	_x[2]=0.0;
}

//----------------------------------------------------------------------
Point::~Point( void )
//----------------------------------------------------------------------
{
}

//----------------------------------------------------------------------
Point::Point( const double x, const double y, const double z )
//----------------------------------------------------------------------
{
	_x[0] = x ;
	_x[1] = y ;
	_x[2] = z ;
}

//----------------------------------------------------------------------
Point::Point( const Point& p )
//----------------------------------------------------------------------
{
	_x[0] = p.x() ;
	_x[1] = p.y() ;
	_x[2] = p.z() ;
}

//----------------------------------------------------------------------
double&
Point::operator[] ( int i )
//----------------------------------------------------------------------
{
	return _x[i] ;
}

//----------------------------------------------------------------------
double
Point::x () const
//----------------------------------------------------------------------
{
	return _x[0] ;
}

//----------------------------------------------------------------------
double
Point::y () const
//----------------------------------------------------------------------
{
	return _x[1] ;
}

//----------------------------------------------------------------------
double
Point::z () const
//----------------------------------------------------------------------
{
	return _x[2] ;
}

//----------------------------------------------------------------------
Point
Point::operator+ ( const Point& p ) const
//----------------------------------------------------------------------
{
	double xcoor= _x[0] + p.x() ;
	double ycoor= _x[1] + p.y() ;
	double zcoor= _x[2] + p.z() ;
	Point p1(xcoor,ycoor,zcoor);
	return p1;
}

//----------------------------------------------------------------------
Point
Point::operator- ( const Point& p ) const
//----------------------------------------------------------------------
{
	double xcoor= _x[0] - p.x() ;
	double ycoor= _x[1] - p.y() ;
	double zcoor= _x[2] - p.z() ;
	Point p1(xcoor,ycoor,zcoor);
	return p1;
}

//----------------------------------------------------------------------
const Point&
Point::operator+= ( const Point& p )
//----------------------------------------------------------------------
{
	_x[0] += p.x() ;
	_x[1] += p.y() ;
	_x[2] += p.z() ;
	return *this;
}

//----------------------------------------------------------------------
const Point&
Point::operator-= ( const Point& p )
//----------------------------------------------------------------------
{
	_x[0] -= p.x() ;
	_x[1] -= p.y() ;
	_x[2] -= p.z() ;
	return *this;
}

//----------------------------------------------------------------------
Point
Point::operator* ( double s ) const
//----------------------------------------------------------------------
{
	double xcoor= _x[0]*s ;
	double ycoor= _x[1]*s ;
	double zcoor= _x[2]*s ;
	Point p1(xcoor,ycoor,zcoor);
	return p1;
}

//----------------------------------------------------------------------
const Point&
Point::operator*= ( double s )
//----------------------------------------------------------------------
{
	_x[0] *= s ;
	_x[1] *= s ;
	_x[2] *= s ;
	return *this;
}

//----------------------------------------------------------------------
Point
Point::operator/ ( double s ) const
//----------------------------------------------------------------------
{
	double xcoor= _x[0]/s ;
	double ycoor= _x[1]/s ;
	double zcoor= _x[2]/s ;
	Point p1(xcoor,ycoor,zcoor);
	return p1;
}

//----------------------------------------------------------------------
const Point&
Point::operator/= ( double s )
//----------------------------------------------------------------------
{
	_x[0] /= s ;
	_x[1] /= s ;
	_x[2] /= s ;
	return *this;
}

//----------------------------------------------------------------------
const Point&
Point::operator= ( const Point& p )
//----------------------------------------------------------------------
{
	_x[0] = p.x() ;
	_x[1] = p.y() ;
	_x[2] = p.z() ;
	return *this;
}

//----------------------------------------------------------------------
double
Point::distance( const Point& p ) const
//----------------------------------------------------------------------
{
	double dx = p.x() - _x[0] ;
	double dy = p.y() - _x[1] ;
	double dz = p.z() - _x[2] ;

	return sqrt(dx*dx + dy*dy + dz*dz) ;
}

//----------------------------------------------------------------------
double Point::norm() const
//----------------------------------------------------------------------
{
	return sqrt(_x[0]*_x[0] + _x[1]*_x[1] + _x[2]*_x[2]) ;
}
//----------------------------------------------------------------------
double Point::dot( const Point& p ) const
//----------------------------------------------------------------------
{
	return _x[0]*p.x() + _x[1]*p.y() + _x[2]*p.z() ;
}
