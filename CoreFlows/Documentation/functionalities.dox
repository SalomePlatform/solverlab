/*!
\page functionalities Available functionalities  

\section mesh Meshes

The simulation requires a mesh \f$M\f$ that can be defined either

- using the \ref cdmath structured mesh constructor Mesh \f$M(xmin,xmax,nx)\f$
- loading a med file generated by \ref salome platform Mesh \f$M\f$ (''  filename '')

All the boundary faces of the mesh sould be gathered into groups of FACES that will be used to set boundary conditions. These groups of faces can be set
- using the \ref cdmath face group generator \a M.setGroupAtPlan(value,direction,tolerance,groupName), where direction is an integer with value \f$0\f$ for the plane \f$x=value\f$, \f$1\f$ for the plane \f$y=value\f$ and \f$2\f$ for the plane \f$z=value\f$
- using \ref salome platform when generating the med file


\section Initialdata Initial data or power fields
The initial data and power fields can be defined on the simulation mesh using the Field class of \ref cdmath either
- starting from a null field using the command Field(fieldname,ON\_CELLS,numberOfComponents), then setting the values on cell \f$i\f$ for each component  \f$j\f$ with the command \f$F(i,j)=fij\f$
- loading a field stored in a med file using the command Field(filename,ON\_CELLS, filename)

The initial data should in general be a vector field containing parameters that are specific to each model
- SinglePhase : \f$(p, \vec{v}, T)\f$, ie pressure, velocity, temperature
- DriftModel : \f$(c_g, p, \vec{v}, T)\f$, ie phase 1 concentration, pressure, velocity, temperature
- IsothermalTwoFluid : \f$(\alpha_g, p,\vec{v}_g,\vec{v}_l)\f$, ie phase 1 void fraction, pressure, phase 1 velocity, phase 2 velocity
- FiveEqsTwoFluid : \f$(\alpha_g, p,\vec{v}_g,\vec{v}_l,T)\f$, ie phase 1 void fraction, pressure, phase 1 velocity, phase 2 velocity, common temperature
- TransportEquation : \f$h\f$ the fluid enthalpy 
- DiffusionEquation : \f$T\f$ the solid temperature

Whatever the model chosen, the initial data is set with the function ProblemCoreFlows::setInitialField (initialField), and the heat power field is set with the function ProblemCoreFlows::setHeatSource(heatPower) for a constant uniform value or the function ProblemCoreFlows::setHeatSourceField(heatPowerField) for a variable power field.

\section models Models

The model can be set as

- SinglePhase::SinglePhase ( \ref fluidType, \ref pressureEstimate,spaceDimension) where \ref fluidType is either  \ref Liquid or \ref Steam, and \ref pressureEstimate is \ref around1bar300K or \ref around155bars600K
- DriftModel::DriftModel (\ref pressureEstimate,spaceDimension) where  pressureEstimate is \ref around1bar300K or \ref around155bars600K
- IsothermalTwoFluid::IsothermalTwoFluid (\ref pressureEstimate,spaceDimension) where  pressureEstimate is \ref around1bar300K or \ref around155bars600K
- FiveEqsTwoFluid::FiveEqsTwoFluid (\ref pressureEstimate,spaceDimension) where  pressureEstimate is \ref around1bar300K or \ref around155bars600K
- TransportEquation::TransportEquation (\ref fluidType, \ref pressureEstimate ,\f$\vec v\f$) where \ref fluidType is either  \ref Liquid or \ref Steam, \ref pressureEstimate is \ref around1bar300K or \ref around155bars600K and\f$\vec v\f$ is the velocity vector assumed constant and of type vector<double>
- DiffusionEquation::DiffusionEquation (spaceDim,\f$ \rho, c_p,\lambda\f$) where \f$\rho\f$ is the solid density, \f$c_p\f$ its specific heat and \f$\lambda\f$ its conductivity with default values set for Uranirum

\section PhyOption Physical options
The following physical parameters have default value zero but can be set by the user:

- In order to set a constant heat source : ProblemCoreFlows::setHeatSource(\f$ heatSource \f$) where heat source is a double
- In order to set the viscosities : ProblemFluid::setViscosity(\f$ viscosite \f$ ) where viscosite is a \f$vector<double>\f$ of size nbPhases
- In order to set the conductivities : ProblemFluid::setConductivity (\f$ conductivite\f$ ) where conductivite is a \f$vector<double>\f$ of size nbPhases
- In order to set the gravity : ProblemFluid::setGravity(\f$ gravite\f$ ) where gravite is a \f$vector<double>\f$ of size spaceDim
- In order to set the friction coefficients : ProblemFluid::setDragCoeffs(\f$ dragCoeffs\f$ ) where dragCoeffs is a \f$vector<double>\f$ containing the friction coefficients between fluid and solid in a porous approach for SinglePhase (one coefficient) and DriftModel (two coefficients), or interfacial friction between the two phases for IsothermalTwoFluid (one coefficient) and FiveEqsTwoFluid (one coefficient)
- In order to set the heat transfert coefficient between fluid and solid in a porous flow ProblemCoreFlows::setHeatTransfertCoeff (heatCoeff)

\section NumOption Numerical options

- The nonlinear formulation can be \ref Roe, \ref VFRoe or \ref VFFC and is set by the method ProblemFluid::setNonLinearFormulation(\ref NonLinearFormulation)
- The time discretisation can be \ref Explicit or \ref Implicit, and the space discretisation can be \ref upwind, \ref lowMach, \ref pressureCorrection, \ref staggered or \ref centered. The space and time discretisations can be set using the command ProblemCoreFlows::setNumericalScheme( \ref upwind ,  \ref Explicit ); or ProblemCoreFlows::setNumericalScheme( \ref centered ,  \ref Implicit); for instance. 
- Advanced options can be set to enforce a well balanced scheme with ProblemFluid::setWellBalancedCorrection or an entropic scheme  with ProblemFluid::setEntropicCorrection.
- In order to set the cfl number: ProblemCoreFlows::setCFL(\f$ cfl \f$ );
- In order to set the tolerance number  : ProblemCoreFlows::setPrecision(\f$ precision \f$ );
- In order to set the maximum number of time steps : ProblemCoreFlows::setMaxNbOfTimeStep(\f$ MaxNbOfTimeStep\f$ );
- In order to set the maximum time of the computation : ProblemCoreFlows::setTimeMax(\f$ maxTime\f$);
- In order to set the linear solver and preconditioner : ProblemCoreFlows::setLinearSolver(\ref GMRES, \ref ILU ).
The usual linear solvers are \ref GMRES and \ref BICGSTAB, and the usual "preconditionners" are \ref ILU and \ref LU.


\section BoundaryCdts Boundary conditions

For the numerical treatment of the boundaries, it is important that each boundary (Group in Salome vocabulary) be assigned a \ref BoundaryType.

Boundary types can be 

- \ref Wall
      + simply set with the function SinglePhase::setWallBoundaryCondition, DriftModel::setWallBoundaryCondition, IsothermalTwoFluid::setWallBoundaryCondition, FiveEqsTwoFluid::setWallBoundaryCondition
      + possible for all fluid models : SinglePhase, DriftModel, IsothermalTwoFluid, FiveEqsTwoFluid
- \ref Neumann
      + simply set with the function ProblemCoreFlows::setNeumannBoundaryCondition
      + possible for all models
- \ref Inlet
      + simply set with the functions SinglePhase::setInletBoundaryCondition, SinglePhase::setInletBoundaryCondition, DriftModel::setInletBoundaryCondition, IsothermalTwoFluid::setInletBoundaryCondition, FiveEqsTwoFluid::setInletBoundaryCondition or TransportEquation::setInletBoundaryCondition
      + possible for TransportEquation, SinglePhase, DriftModel, IsothermalTwoFluid, FiveEqsTwoFluid
- \ref Outlet
      + simply set with the command ProblemFluid::setOutletBoundaryCondition
      + possible for all fluid models : SinglePhase, DriftModel, IsothermalTwoFluid, FiveEqsTwoFluid
- \ref Dirichlet
      + simply set with the command DiffusionEquation::setDirichletBoundaryCondition
      + possible for DiffusionEquation

The former way to set the boundary conditions was to create a C++ map \f$map<string, LimitField> boundaryFields\f$ that associates the boundary name to a field. Once the map is filled with the appropriate content, the boundary conditions are set with the command ProblemCoreFlows::setBoundaryFields(boundaryFields).
The LimitField structure is specific to each model and each type of boundary condition.
- for a Neumann boundary condition :  LimitField limitNeumann; limitNeumann.bcType=Neumann;

- for an Inlet boundary condition (not possible for DiffusionEquation): LimitField limitInlet; limitInlet.bcType=Inlet; then
      + For TransportEquation: 
		- limitInlet.h=1.3e6
      + For SinglePhase (3D case):
	  - limitInlet.T = 600;	
	  - limitInlet.v\_x = \f$vector<double>(1,0)\f$;
	  - limitInlet.v\_y = \f$vector<double>(1,0)\f$;
	  - limitInlet.v\_z = \f$vector<double>(1,0)\f$; 

     + For DriftModel (3D case):
	  - limitInlet.c=0;	
	  - limitInlet.T = 600;	
	  - limitInlet.v\_x = \f$vector<double>(1,0)\f$;
	  - limitInlet.v\_y = \f$vector<double>(1,0)\f$;
	  - limitInlet.v\_z = \f$vector<double>(1,0)\f$;

     + For IsothermalTwoFluid Model (3D case):	
	  - limitInlet.alpha=0;	
	  - limitInlet.v\_x = \f$vector<double>(2,0)\f$;
	  - limitInlet.v\_y = \f$vector<double>(2,0)\f$;	
	  - limitInlet.v\_z = \f$vector<double>(2,0)\f$;

     + For FiveEqsTwoFluid (3D case): 		
	  - limitInlet.alpha=0;	
	  - limitInlet.T = 600;	
	  - limitInlet.v\_x = \f$vector<double>(2,0)\f$;	
	  - limitInlet.v\_y = \f$vector<double>(2,0)\f$;	
	  - limitInlet.v\_z = \f$vector<double>(2,0)\f$; 

     + then boundaryFields['' \a Inlet'']= limitInlet;	

- for an Outlet boundary condition (for fluid models): LimitField limitOutlet; limitOutlet.bcType=Outlet; then
      + For all fluid models (SinglePhase, DriftModel, IsothermalTwoFluid, FiveEqsTwoFluid: 		
	  - limitOutlet.p = 155e5;
      + then boundaryFields[''\a outlet'']= limitOutlet;
      
- for a Wall with friction and/or heat conduction : LimitField limitWall; limitWall.bcType=Wall; then
      + For SinglePhase (3D case): 
	  - limitWall.T = 600;	
	  - limitWall.v\_x = \f$vector<double>(1,0)\f$;	
	  - limitWall.v\_y = \f$vector<double>(1,0)\f$; 	
	  - limitWall.v\_z = \f$vector<double>(1,0)\f$;
      + For DriftModel (3D case):		
	  - limitWall.T = 600;	
	  - limitWall.v\_x = \f$vector<double>(1,0)\f$;	
	  - limitWall.v\_y = \f$vector<double>(1,0)\f$;	
	  - limitWall.v\_z = \f$vector<double>(1,0)\f$;
      + For IsothermalTwoFluid Model (3D case):	
	  - limitWall.v\_x = \f$vector<double>(2,0)\f$;
	  - limitWall.v\_y = \f$vector<double>(2,0)\f$;
	  - limitWall.v\_z = \f$vector<double>(2,0)\f$;
      + For FiveEqsTwoFluid (3D case): 		
	  - limitWall.T = 600;
	  - limitWall.v\_x = \f$vector<double>(2,0)\f$;	
	  - limitWall.v\_y = \f$vector<double>(2,0)\f$;	
	  - limitWall.v\_z = \f$vector<double>(2,0)\f$;	
      + Then boundaryFields['' \a Wall '']= limitWall;	

- for a Dirichlet boundary condition (only for DiffusionEquation) : LimitField limitDirichlet; limitDirichlet.bcType=Dirichlet; then
  	- limitDirichlet.T = 600; 
	- boundaryFields['' \a Dirichlet'']= limitDirichlet; 


*/

